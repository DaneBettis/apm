name | exitedit~
capability | builder~
description | def command(caller, args):
    helpstring = "Please see {Whelp exitedit{x for instructions."
    args = args.split()
    isBuilding = hasattr(caller, 'building')
    isEditing = hasattr(caller, 'editing')

    if len(args) == 0:
        if isBuilding and not isEditing:
            caller.write(caller.building.display())
            return
        elif not isBuilding:
            caller.write(helpstring)
            return

    if isBuilding:
        if args[0] == 'done':
            caller.building.room.area.save()
            caller.building.builder = None
            del(caller.building)
            caller.prompt = caller.oldprompt
            del(caller.oldprompt)
        elif args[0] == 'new':
            caller.write("You are already editing an exit.")
            return
        elif args[0] in caller.building.commands:
            caller.building.doAttrib(args[0], ' '.join(args[1:]))
        else:
            caller.write(helpstring)
    else:
        if args[0] == 'new':
            if len(args) != 3:
                caller.write(helpstring)
            else:
                if args[1] in exits.directions:
                    direction = args[1]
                else:
                    caller.write("Thats not a valid direction.")
                    return
                myarea = caller.location.area
                myvnum = int(args[2])
                if myvnum < myarea.vnumlow or myvnum > myarea.vnumhigh:
                    caller.write("That vnum is not in this areas range!")
                    return
                if direction in caller.location.exits:
                    caller.write("That exit already exists.")
                    return
                else:
                    defaultexitdata = "false 0 0 false 0 0 0 none huge false true none"
                    newexitdata = "{0} {1} {2}".format(direction, myvnum, defaultexitdata)
                    newexit = exits.Exit(caller.location, newexitdata)
                    caller.building = newexit
                    caller.location.exits[direction] = newexit
                    caller.building.builder = caller
                    caller.write("Editing {{W{0}{{x".format(args[1]))
                    caller.write(caller.building.display())
                    caller.oldprompt = caller.prompt
                    caller.prompt = "exitEdit:> "
        elif args[0] == 'delete':
            if args[1] in caller.location.exits:
                caller.location.exits.pop(args[1])
            caller.write("{0} exit has been removed".format(args[1]))
        elif args[0] in caller.location.exits:
            direction = args[0]
            caller.building = caller.location.exits[direction]
            caller.building.builder = caller
            caller.write("Editing exit: {{W{0}{{x.".format(args[0]))
            caller.write(helpstring)
            caller.oldprompt = caller.prompt
            caller.prompt = "exitEdit:> "
            caller.write(caller.building.display())
        else:
            caller.write(helpstring)

command(caller, args)~
disabled | false~
racelim | ~
classlim | ~
skilllim | ~
noview | False~
